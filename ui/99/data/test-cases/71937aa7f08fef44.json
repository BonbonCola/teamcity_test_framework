{"uid":"71937aa7f08fef44","name":"test_user_creates_build[driver0]","fullName":"tests.ui_tests.test_create_build.TestCreateBuild#test_user_creates_build","historyId":"50eaa83fa936ab289ce10e5a4eebece5","time":{"start":1749128563724,"stop":1749128642516,"duration":78792},"description":"User should be able to create build","descriptionHtml":"<p>User should be able to create build</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found","statusTrace":"self = <test_create_build.TestCreateBuild object at 0x7fbe58281050>\ntest_data = <conftest.TestData object at 0x7fbe582f5b90>\nuser_factory = <function user_factory.<locals>.user_builder at 0x7fbe582d7ba0>\nspecifications = <main.api.specs.specifications.Specifications object at 0x7fbe582247d0>\ndriver = <selenium.webdriver.remote.webdriver.WebDriver (session=\"c1e36710063766bb9e191dafff40cf59\")>\n\n    @pytest.mark.positive\n    def test_user_creates_build(self, test_data, user_factory, specifications, driver):\n        \"\"\"User should be able to create build\"\"\"\n        # подготовка окружения\n        with allure.step(\"Create user and project\"):\n            user = user_factory(role_id=\"PROJECT_ADMIN\", scope_type=\"g\")\n            project_request = CheckedRequest(specifications.authSpec(user), Endpoint.PROJECTS.url)\n            project_request.create(test_data.project.model_dump())\n        with allure.step(\"Login as user\"):\n            driver.delete_all_cookies()\n            login_page = LoginPage.open(driver)\n            login_page.login(user)\n        # взаимодействие с UI\n        with allure.step(\"Open `Create Build Page` (http://localhost:8111/admin/createObjectMenu.html)\"):\n            create_build_page = BuildCreatePage.open(driver = driver, project_id=test_data.project.id)\n            time.sleep(15)\n        with allure.step(\"Send all build parameters (repository URL)\"):\n>           create_build_page.base_create_form(\"https://github.com/BonbonCola/test_teamcity\")\n\ntests/ui_tests/test_create_build.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmain/ui/base_create_page.py:18: in base_create_form\n    self.type(self.input_repository_url, repository_url)\nmain/ui/base_page.py:51: in type\n    element = self.find(locator)\nmain/ui/base_page.py:18: in find\n    element = WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:137: in until\n    value = method(self._driver)\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fbe58236bd0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"session timed out or not found\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found\n\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidSessionIdException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749128562193,"stop":1749128562235,"duration":42},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"test_data","time":{"start":1749128562235,"stop":1749128562241,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"specifications","time":{"start":1749128562241,"stop":1749128562241,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"user_factory","time":{"start":1749128562241,"stop":1749128562241,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver","time":{"start":1749128562242,"stop":1749128563722,"duration":1480},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"User should be able to create build","status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found","statusTrace":"self = <test_create_build.TestCreateBuild object at 0x7fbe58281050>\ntest_data = <conftest.TestData object at 0x7fbe582f5b90>\nuser_factory = <function user_factory.<locals>.user_builder at 0x7fbe582d7ba0>\nspecifications = <main.api.specs.specifications.Specifications object at 0x7fbe582247d0>\ndriver = <selenium.webdriver.remote.webdriver.WebDriver (session=\"c1e36710063766bb9e191dafff40cf59\")>\n\n    @pytest.mark.positive\n    def test_user_creates_build(self, test_data, user_factory, specifications, driver):\n        \"\"\"User should be able to create build\"\"\"\n        # подготовка окружения\n        with allure.step(\"Create user and project\"):\n            user = user_factory(role_id=\"PROJECT_ADMIN\", scope_type=\"g\")\n            project_request = CheckedRequest(specifications.authSpec(user), Endpoint.PROJECTS.url)\n            project_request.create(test_data.project.model_dump())\n        with allure.step(\"Login as user\"):\n            driver.delete_all_cookies()\n            login_page = LoginPage.open(driver)\n            login_page.login(user)\n        # взаимодействие с UI\n        with allure.step(\"Open `Create Build Page` (http://localhost:8111/admin/createObjectMenu.html)\"):\n            create_build_page = BuildCreatePage.open(driver = driver, project_id=test_data.project.id)\n            time.sleep(15)\n        with allure.step(\"Send all build parameters (repository URL)\"):\n>           create_build_page.base_create_form(\"https://github.com/BonbonCola/test_teamcity\")\n\ntests/ui_tests/test_create_build.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmain/ui/base_create_page.py:18: in base_create_form\n    self.type(self.input_repository_url, repository_url)\nmain/ui/base_page.py:51: in type\n    element = self.find(locator)\nmain/ui/base_page.py:18: in find\n    element = WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:137: in until\n    value = method(self._driver)\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/support/expected_conditions.py:224: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fbe58236bd0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"session timed out or not found\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found\n\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidSessionIdException","steps":[{"name":"Create user and project","time":{"start":1749128563724,"stop":1749128565177,"duration":1453},"status":"passed","steps":[{"name":"Create user with role_id=PROJECT_ADMIN, scope_type=g","time":{"start":1749128563724,"stop":1749128564195,"duration":471},"status":"passed","steps":[{"name":"Generate user","time":{"start":1749128563724,"stop":1749128563727,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Create user at backend","time":{"start":1749128563727,"stop":1749128564195,"duration":468},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true},{"name":"Login as user","time":{"start":1749128565177,"stop":1749128578430,"duration":13253},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Open `Create Build Page` (http://localhost:8111/admin/createObjectMenu.html)","time":{"start":1749128578430,"stop":1749128627511,"duration":49081},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Send all build parameters (repository URL)","time":{"start":1749128627511,"stop":1749128642513,"duration":15002},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found\n\n","statusTrace":"  File \"/home/runner/work/teamcity_test_framework/teamcity_test_framework/tests/ui_tests/test_create_build.py\", line 32, in test_user_creates_build\n    create_build_page.base_create_form(\"https://github.com/BonbonCola/test_teamcity\")\n  File \"/home/runner/work/teamcity_test_framework/teamcity_test_framework/main/ui/base_create_page.py\", line 18, in base_create_form\n    self.type(self.input_repository_url, repository_url)\n  File \"/home/runner/work/teamcity_test_framework/teamcity_test_framework/main/ui/base_page.py\", line 51, in type\n    element = self.find(locator)\n              ^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/teamcity_test_framework/teamcity_test_framework/main/ui/base_page.py\", line 18, in find\n    element = WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator))\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/support/wait.py\", line 137, in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/support/expected_conditions.py\", line 224, in _predicate\n    return _element_if_visible(driver.find_element(*locator))\n                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 898, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[{"uid":"3c92087f86cda4dc","name":"log","source":"3c92087f86cda4dc.txt","type":"text/plain","size":16976},{"uid":"eca45d4f51b34fea","name":"stderr","source":"eca45d4f51b34fea.txt","type":"text/plain","size":17646}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":7,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1749128642629,"stop":1749128642632,"duration":3},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/allure_commons/_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 907, in _teardown_yield_fixture\n    next(it)\n  File \"/home/runner/work/teamcity_test_framework/teamcity_test_framework/tests/conftest.py\", line 87, in driver\n    driver.delete_all_cookies()\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 755, in delete_all_cookies\n    self.execute(Command.DELETE_ALL_COOKIES)\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true},{"name":"user_factory::0","time":{"start":1749128642632,"stop":1749128642777,"duration":145},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"test_data::0","time":{"start":1749128642778,"stop":1749128642778,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"specifications::0","time":{"start":1749128642778,"stop":1749128642778,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"positive"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"tests.ui_tests"},{"name":"suite","value":"test_create_build"},{"name":"subSuite","value":"TestCreateBuild"},{"name":"host","value":"pkrvmf6wy0o8zjz"},{"name":"thread","value":"4525-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.ui_tests.test_create_build"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"driver","value":"('chrome', '91.0')"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":14,"skipped":0,"passed":2,"unknown":0,"total":16},"items":[{"uid":"fcae382f07d274c9","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/98//#testresult/fcae382f07d274c9","status":"broken","statusDetails":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found","time":{"start":1748959281674,"stop":1748959362551,"duration":80877}},{"uid":"736793f84b39b3e9","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/97//#testresult/736793f84b39b3e9","status":"passed","time":{"start":1748954188794,"stop":1748954273421,"duration":84627}},{"uid":"e68cdc51a9f11174","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/96//#testresult/e68cdc51a9f11174","status":"broken","statusDetails":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found","time":{"start":1748952374736,"stop":1748952451867,"duration":77131}},{"uid":"12fcd1aafb11d925","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/95//#testresult/12fcd1aafb11d925","status":"broken","statusDetails":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found","time":{"start":1748950255669,"stop":1748950333192,"duration":77523}},{"uid":"bcc3ad832f21c8ee","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/94//#testresult/bcc3ad832f21c8ee","status":"broken","statusDetails":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found","time":{"start":1748949238291,"stop":1748949318090,"duration":79799}},{"uid":"b5195ea65cf59038","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/93//#testresult/b5195ea65cf59038","status":"broken","statusDetails":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found","time":{"start":1748948691561,"stop":1748948770639,"duration":79078}},{"uid":"3b2ef39092137e4a","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/90//#testresult/3b2ef39092137e4a","status":"broken","statusDetails":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found","time":{"start":1748875539037,"stop":1748875618941,"duration":79904}},{"uid":"98e07491e0182c09","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/89//#testresult/98e07491e0182c09","status":"broken","statusDetails":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found","time":{"start":1747230323828,"stop":1747230405311,"duration":81483}},{"uid":"59cfc0eb2faf4422","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/88//#testresult/59cfc0eb2faf4422","status":"broken","statusDetails":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found","time":{"start":1747071925060,"stop":1747072003729,"duration":78669}},{"uid":"e964106d3f679388","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/87//#testresult/e964106d3f679388","status":"broken","statusDetails":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found","time":{"start":1747071507924,"stop":1747071587700,"duration":79776}},{"uid":"2f2f0b80e9889185","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/86//#testresult/2f2f0b80e9889185","status":"broken","statusDetails":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found","time":{"start":1747065431947,"stop":1747065510346,"duration":78399}},{"uid":"107fd9f7417a4cfd","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/84//#testresult/107fd9f7417a4cfd","status":"broken","statusDetails":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found","time":{"start":1747052259372,"stop":1747052340555,"duration":81183}},{"uid":"634eae06ef8dbe7","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/83//#testresult/634eae06ef8dbe7","status":"broken","statusDetails":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found","time":{"start":1746798313933,"stop":1746798395023,"duration":81090}},{"uid":"586ea5523b221225","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/82//#testresult/586ea5523b221225","status":"broken","statusDetails":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found","time":{"start":1746708828878,"stop":1746708909993,"duration":81115}},{"uid":"3f812e6cc2459611","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/81//#testresult/3f812e6cc2459611","status":"passed","time":{"start":1746560426468,"stop":1746560526040,"duration":99572}}]},"tags":["regression","positive"]},"source":"71937aa7f08fef44.json","parameterValues":["('chrome', '91.0')"]}