{"uid":"b364f3b99c814b5f","name":"test_user_creates_build","fullName":"tests.ui_tests.test_create_build.TestCreateBuild#test_user_creates_build","historyId":"0df0464e23757e98009be32e2329e3b3","time":{"start":1746538240325,"stop":1746538347561,"duration":107236},"description":"User should be able to create build","descriptionHtml":"<p>User should be able to create build</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found","statusTrace":"self = <test_create_build.TestCreateBuild object at 0x7f8c4ce6cd90>\ntest_data = <conftest.TestData object at 0x7f8c4cc5bd10>\nspecifications = <main.api.specs.specifications.Specifications object at 0x7f8c4cc22810>\ndriver = <selenium.webdriver.remote.webdriver.WebDriver (session=\"4ee8b37a4bda0126cebf84abf9fd8f7b\")>\n\n    @pytest.mark.positive\n    def test_user_creates_build(self, test_data, specifications, driver):\n        \"\"\"User should be able to create build\"\"\"\n        # подготовка окружения\n        with allure.step(\"Create user and project\"):\n            user_request = CheckedRequest(specifications.superUserSpec(), Endpoint.USERS.url)\n            user_request.create(test_data.user.model_dump())\n            project_request = CheckedRequest(specifications.authSpec(test_data.user), Endpoint.PROJECTS.url)\n            project_request.create(test_data.project.model_dump())\n        with allure.step(\"Login as user\"):\n            driver.delete_all_cookies()\n            login_page = LoginPage.open(driver)\n            driver.save_screenshot(\"teamcity_fail.png\")\n            login_page.login(test_data.user)\n        # взаимодействие с UI\n        with allure.step(\"Open `Create Build Page` (http://localhost:8111/admin/createObjectMenu.html)\"):\n            create_build_page = BuildCreatePage.open(driver = driver, project_id=test_data.project.id)\n            time.sleep(15)\n        with allure.step(\"Send all build parameters (repository URL)\"):\n>           driver.save_screenshot(\"teamcity_fail1.png\")\n\ntests/ui_tests/test_create_build.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:994: in save_screenshot\n    return self.get_screenshot_as_file(filename)\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:969: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:1003: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:1013: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f8c4cc25dd0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"session timed out or not found\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found\n\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidSessionIdException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1746538237253,"stop":1746538237302,"duration":49},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"test_data","time":{"start":1746538237302,"stop":1746538237310,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"specifications","time":{"start":1746538237310,"stop":1746538237311,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver","time":{"start":1746538237312,"stop":1746538240323,"duration":3011},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"User should be able to create build","status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found","statusTrace":"self = <test_create_build.TestCreateBuild object at 0x7f8c4ce6cd90>\ntest_data = <conftest.TestData object at 0x7f8c4cc5bd10>\nspecifications = <main.api.specs.specifications.Specifications object at 0x7f8c4cc22810>\ndriver = <selenium.webdriver.remote.webdriver.WebDriver (session=\"4ee8b37a4bda0126cebf84abf9fd8f7b\")>\n\n    @pytest.mark.positive\n    def test_user_creates_build(self, test_data, specifications, driver):\n        \"\"\"User should be able to create build\"\"\"\n        # подготовка окружения\n        with allure.step(\"Create user and project\"):\n            user_request = CheckedRequest(specifications.superUserSpec(), Endpoint.USERS.url)\n            user_request.create(test_data.user.model_dump())\n            project_request = CheckedRequest(specifications.authSpec(test_data.user), Endpoint.PROJECTS.url)\n            project_request.create(test_data.project.model_dump())\n        with allure.step(\"Login as user\"):\n            driver.delete_all_cookies()\n            login_page = LoginPage.open(driver)\n            driver.save_screenshot(\"teamcity_fail.png\")\n            login_page.login(test_data.user)\n        # взаимодействие с UI\n        with allure.step(\"Open `Create Build Page` (http://localhost:8111/admin/createObjectMenu.html)\"):\n            create_build_page = BuildCreatePage.open(driver = driver, project_id=test_data.project.id)\n            time.sleep(15)\n        with allure.step(\"Send all build parameters (repository URL)\"):\n>           driver.save_screenshot(\"teamcity_fail1.png\")\n\ntests/ui_tests/test_create_build.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:994: in save_screenshot\n    return self.get_screenshot_as_file(filename)\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:969: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:1003: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:1013: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f8c4cc25dd0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"session timed out or not found\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found\n\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidSessionIdException","steps":[{"name":"Create user and project","time":{"start":1746538240325,"stop":1746538242657,"duration":2332},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Login as user","time":{"start":1746538242657,"stop":1746538262896,"duration":20239},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Open `Create Build Page` (http://localhost:8111/admin/createObjectMenu.html)","time":{"start":1746538262896,"stop":1746538347555,"duration":84659},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Send all build parameters (repository URL)","time":{"start":1746538347555,"stop":1746538347557,"duration":2},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found\n\n","statusTrace":"  File \"/home/runner/work/teamcity_test_framework/teamcity_test_framework/tests/ui_tests/test_create_build.py\", line 34, in test_user_creates_build\n    driver.save_screenshot(\"teamcity_fail1.png\")\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 994, in save_screenshot\n    return self.get_screenshot_as_file(filename)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 969, in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 1003, in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 1013, in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[{"uid":"c219853cb910a799","name":"log","source":"c219853cb910a799.txt","type":"text/plain","size":90693},{"uid":"90a8e7e63865b62c","name":"stdout","source":"90a8e7e63865b62c.txt","type":"text/plain","size":1578}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"driver::0","time":{"start":1746538347725,"stop":1746538347731,"duration":6},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/allure_commons/_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 907, in _teardown_yield_fixture\n    next(it)\n  File \"/home/runner/work/teamcity_test_framework/teamcity_test_framework/tests/conftest.py\", line 172, in driver\n    driver.quit()\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 589, in quit\n    self.execute(Command.QUIT)\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true},{"name":"test_data::0","time":{"start":1746538347732,"stop":1746538347732,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"specifications::0","time":{"start":1746538347732,"stop":1746538347732,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"positive"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"tests.ui_tests"},{"name":"suite","value":"test_create_build"},{"name":"subSuite","value":"TestCreateBuild"},{"name":"host","value":"fv-az1683-859"},{"name":"thread","value":"4063-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.ui_tests.test_create_build"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":16,"skipped":0,"passed":12,"unknown":0,"total":30},"items":[{"uid":"c19cbf985f9342f8","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/71//#testresult/c19cbf985f9342f8","status":"passed","time":{"start":1743712641756,"stop":1743712743357,"duration":101601}},{"uid":"fa50565cae1d1b91","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/71//#testresult/fa50565cae1d1b91","status":"passed","time":{"start":1743710911101,"stop":1743711011664,"duration":100563}},{"uid":"bfd985c394100b27","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/71//#testresult/bfd985c394100b27","status":"passed","time":{"start":1743710243565,"stop":1743710345808,"duration":102243}},{"uid":"ee7490341311c67d","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/71//#testresult/ee7490341311c67d","status":"passed","time":{"start":1743709093929,"stop":1743709199382,"duration":105453}},{"uid":"ec57c0488bba584","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/71//#testresult/ec57c0488bba584","status":"passed","time":{"start":1743708356810,"stop":1743708459028,"duration":102218}},{"uid":"b16677dd4d61e5c8","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/71//#testresult/b16677dd4d61e5c8","status":"passed","time":{"start":1743704713532,"stop":1743704813575,"duration":100043}},{"uid":"585c661e4182b6ae","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/70//#testresult/585c661e4182b6ae","status":"passed","time":{"start":1743703753412,"stop":1743703856899,"duration":103487}},{"uid":"aa90a83e8d47ff9e","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/70//#testresult/aa90a83e8d47ff9e","status":"passed","time":{"start":1743701840574,"stop":1743701939443,"duration":98869}},{"uid":"424a2736ac71d564","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/70//#testresult/424a2736ac71d564","status":"passed","time":{"start":1743699988200,"stop":1743700092081,"duration":103881}},{"uid":"dfcedac8194cfbbe","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/70//#testresult/dfcedac8194cfbbe","status":"passed","time":{"start":1743699119031,"stop":1743699220480,"duration":101449}},{"uid":"2c5c90bc9e0e2a5f","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/70//#testresult/2c5c90bc9e0e2a5f","status":"passed","time":{"start":1743697686100,"stop":1743697790385,"duration":104285}},{"uid":"bd703aa106cb13f6","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/70//#testresult/bd703aa106cb13f6","status":"passed","time":{"start":1743697032107,"stop":1743697137739,"duration":105632}},{"uid":"2cde265fdea3acaf","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/69//#testresult/2cde265fdea3acaf","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x563169536583 <unknown>\n#1 0x5631692aaa38 <unknown>\n#2 0x5631692e0335 <unknown>\n#3 0x563169312aa4 <unknown>\n#4 0x5631692fd77d <unknown>\n#5 0x56316931074c <unknown>\n#6 0x5631692fd643 <unknown>\n#7 0x5631692d3b94 <unknown>\n#8 0x5631692d4b85 <unknown>\n#9 0x563169566c6e <unknown>\n#10 0x56316957c975 <unknown>\n#11 0x563169567bc5 <unknown>\n#12 0x56316957dfb5 <unknown>\n#13 0x56316955c84b <unknown>\n#14 0x563169599248 <unknown>\n#15 0x5631695993c8 <unknown>\n#16 0x5631695b373d <unknown>\n#17 0x7f8cfe462609 start_thread","time":{"start":1743696149494,"stop":1743696255852,"duration":106358}},{"uid":"c4056ad9a3f823f5","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/68//#testresult/c4056ad9a3f823f5","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5557cbf65583 <unknown>\n#1 0x5557cbcd9a38 <unknown>\n#2 0x5557cbd0f335 <unknown>\n#3 0x5557cbd41aa4 <unknown>\n#4 0x5557cbd2c77d <unknown>\n#5 0x5557cbd3f74c <unknown>\n#6 0x5557cbd2c643 <unknown>\n#7 0x5557cbd02b94 <unknown>\n#8 0x5557cbd03b85 <unknown>\n#9 0x5557cbf95c6e <unknown>\n#10 0x5557cbfab975 <unknown>\n#11 0x5557cbf96bc5 <unknown>\n#12 0x5557cbfacfb5 <unknown>\n#13 0x5557cbf8b84b <unknown>\n#14 0x5557cbfc8248 <unknown>\n#15 0x5557cbfc83c8 <unknown>\n#16 0x5557cbfe273d <unknown>\n#17 0x7fb11e94e609 start_thread","time":{"start":1743694582240,"stop":1743694690617,"duration":108377}},{"uid":"4477987bb874e3c8","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/67//#testresult/4477987bb874e3c8","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x562bf1b30583 <unknown>\n#1 0x562bf18a4a38 <unknown>\n#2 0x562bf18da335 <unknown>\n#3 0x562bf190caa4 <unknown>\n#4 0x562bf18f777d <unknown>\n#5 0x562bf190a74c <unknown>\n#6 0x562bf18f7643 <unknown>\n#7 0x562bf18cdb94 <unknown>\n#8 0x562bf18ceb85 <unknown>\n#9 0x562bf1b60c6e <unknown>\n#10 0x562bf1b76975 <unknown>\n#11 0x562bf1b61bc5 <unknown>\n#12 0x562bf1b77fb5 <unknown>\n#13 0x562bf1b5684b <unknown>\n#14 0x562bf1b93248 <unknown>\n#15 0x562bf1b933c8 <unknown>\n#16 0x562bf1bad73d <unknown>\n#17 0x7f09447cb609 start_thread","time":{"start":1743693966147,"stop":1743694047998,"duration":81851}},{"uid":"28673204823709ec","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/67//#testresult/28673204823709ec","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x56441b383583 <unknown>\n#1 0x56441b0f7a38 <unknown>\n#2 0x56441b12d335 <unknown>\n#3 0x56441b15faa4 <unknown>\n#4 0x56441b14a77d <unknown>\n#5 0x56441b15d74c <unknown>\n#6 0x56441b14a643 <unknown>\n#7 0x56441b120b94 <unknown>\n#8 0x56441b121b85 <unknown>\n#9 0x56441b3b3c6e <unknown>\n#10 0x56441b3c9975 <unknown>\n#11 0x56441b3b4bc5 <unknown>\n#12 0x56441b3cafb5 <unknown>\n#13 0x56441b3a984b <unknown>\n#14 0x56441b3e6248 <unknown>\n#15 0x56441b3e63c8 <unknown>\n#16 0x56441b40073d <unknown>\n#17 0x7f4be50f0609 start_thread","time":{"start":1743693100708,"stop":1743693184430,"duration":83722}},{"uid":"d63a6d0597eb3eab","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/66//#testresult/d63a6d0597eb3eab","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x556f06561583 <unknown>\n#1 0x556f062d5a38 <unknown>\n#2 0x556f0630b335 <unknown>\n#3 0x556f0633daa4 <unknown>\n#4 0x556f0632877d <unknown>\n#5 0x556f0633b74c <unknown>\n#6 0x556f06328643 <unknown>\n#7 0x556f062feb94 <unknown>\n#8 0x556f062ffb85 <unknown>\n#9 0x556f06591c6e <unknown>\n#10 0x556f065a7975 <unknown>\n#11 0x556f06592bc5 <unknown>\n#12 0x556f065a8fb5 <unknown>\n#13 0x556f0658784b <unknown>\n#14 0x556f065c4248 <unknown>\n#15 0x556f065c43c8 <unknown>\n#16 0x556f065de73d <unknown>\n#17 0x7faf55b5e609 start_thread","time":{"start":1743692633932,"stop":1743692737496,"duration":103564}},{"uid":"86532082ea817f14","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/65//#testresult/86532082ea817f14","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55b1f4fa3583 <unknown>\n#1 0x55b1f4d17a38 <unknown>\n#2 0x55b1f4d4d335 <unknown>\n#3 0x55b1f4d7faa4 <unknown>\n#4 0x55b1f4d6a77d <unknown>\n#5 0x55b1f4d7d74c <unknown>\n#6 0x55b1f4d6a643 <unknown>\n#7 0x55b1f4d40b94 <unknown>\n#8 0x55b1f4d41b85 <unknown>\n#9 0x55b1f4fd3c6e <unknown>\n#10 0x55b1f4fe9975 <unknown>\n#11 0x55b1f4fd4bc5 <unknown>\n#12 0x55b1f4feafb5 <unknown>\n#13 0x55b1f4fc984b <unknown>\n#14 0x55b1f5006248 <unknown>\n#15 0x55b1f50063c8 <unknown>\n#16 0x55b1f502073d <unknown>\n#17 0x7efd2af32609 start_thread","time":{"start":1743691690393,"stop":1743691789482,"duration":99089}},{"uid":"413760639d3d7db6","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/64//#testresult/413760639d3d7db6","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x56472e356583 <unknown>\n#1 0x56472e0caa38 <unknown>\n#2 0x56472e100335 <unknown>\n#3 0x56472e132aa4 <unknown>\n#4 0x56472e11d77d <unknown>\n#5 0x56472e13074c <unknown>\n#6 0x56472e11d643 <unknown>\n#7 0x56472e0f3b94 <unknown>\n#8 0x56472e0f4b85 <unknown>\n#9 0x56472e386c6e <unknown>\n#10 0x56472e39c975 <unknown>\n#11 0x56472e387bc5 <unknown>\n#12 0x56472e39dfb5 <unknown>\n#13 0x56472e37c84b <unknown>\n#14 0x56472e3b9248 <unknown>\n#15 0x56472e3b93c8 <unknown>\n#16 0x56472e3d373d <unknown>\n#17 0x7fa76cf6f609 start_thread","time":{"start":1743690845528,"stop":1743690946118,"duration":100590}},{"uid":"b3a6ba5f64be0f97","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/63//#testresult/b3a6ba5f64be0f97","status":"broken","statusDetails":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found","time":{"start":1743690080736,"stop":1743690150510,"duration":69774}}]},"tags":["regression","positive"]},"source":"b364f3b99c814b5f.json","parameterValues":[]}