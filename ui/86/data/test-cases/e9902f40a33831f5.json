{"uid":"e9902f40a33831f5","name":"test_user_creates_project[driver0]","fullName":"tests.ui_tests.test_create_project.TestCreateProject#test_user_creates_project","historyId":"fa548e08e8b1689e3ca8e79b53c91b35","time":{"start":1747065511242,"stop":1747065511392,"duration":150},"description":"User should be able to create project","descriptionHtml":"<p>User should be able to create project</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found","statusTrace":"self = <test_create_project.TestCreateProject object at 0x7fdee189a4d0>\ntest_data = <conftest.TestData object at 0x7fdee186a390>\nuser_factory = <function user_factory.<locals>.user_builder at 0x7fdee1719440>\nspecifications = <main.api.specs.specifications.Specifications object at 0x7fdee18ef150>\ndriver = <selenium.webdriver.remote.webdriver.WebDriver (session=\"4e3410ecdd528b95a0556925bba0055e\")>\n\n    @pytest.mark.positive\n    def test_user_creates_project(self, test_data, user_factory, specifications, driver):\n        \"\"\"User should be able to create project\"\"\"\n        #подготовка окружения\n        with allure.step(\"Login as user\"):\n            user = user_factory(role_id=\"PROJECT_ADMIN\", scope_type=\"g\")\n>           login_page = LoginPage.open(driver)\n\ntests/ui_tests/test_create_project.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmain/ui/login_page.py:26: in open\n    driver.get(f\"{Config().properties.servers.dev.internal_base_url}/login.html\")\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:454: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fdee1706110>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"session timed out or not found\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found\n\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidSessionIdException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1747065429035,"stop":1747065429082,"duration":47},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver","time":{"start":1747065429083,"stop":1747065431936,"duration":2853},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"test_data","time":{"start":1747065511235,"stop":1747065511241,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"specifications","time":{"start":1747065511241,"stop":1747065511242,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"user_factory","time":{"start":1747065511242,"stop":1747065511242,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"User should be able to create project","status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found","statusTrace":"self = <test_create_project.TestCreateProject object at 0x7fdee189a4d0>\ntest_data = <conftest.TestData object at 0x7fdee186a390>\nuser_factory = <function user_factory.<locals>.user_builder at 0x7fdee1719440>\nspecifications = <main.api.specs.specifications.Specifications object at 0x7fdee18ef150>\ndriver = <selenium.webdriver.remote.webdriver.WebDriver (session=\"4e3410ecdd528b95a0556925bba0055e\")>\n\n    @pytest.mark.positive\n    def test_user_creates_project(self, test_data, user_factory, specifications, driver):\n        \"\"\"User should be able to create project\"\"\"\n        #подготовка окружения\n        with allure.step(\"Login as user\"):\n            user = user_factory(role_id=\"PROJECT_ADMIN\", scope_type=\"g\")\n>           login_page = LoginPage.open(driver)\n\ntests/ui_tests/test_create_project.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmain/ui/login_page.py:26: in open\n    driver.get(f\"{Config().properties.servers.dev.internal_base_url}/login.html\")\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:454: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fdee1706110>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"session timed out or not found\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found\n\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidSessionIdException","steps":[{"name":"Login as user","time":{"start":1747065511242,"stop":1747065511391,"duration":149},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found\n\n","statusTrace":"  File \"/home/runner/work/teamcity_test_framework/teamcity_test_framework/tests/ui_tests/test_create_project.py\", line 21, in test_user_creates_project\n    login_page = LoginPage.open(driver)\n                 ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/teamcity_test_framework/teamcity_test_framework/main/ui/login_page.py\", line 26, in open\n    driver.get(f\"{Config().properties.servers.dev.internal_base_url}/login.html\")\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 454, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"Create user with role_id=PROJECT_ADMIN, scope_type=g","time":{"start":1747065511242,"stop":1747065511368,"duration":126},"status":"passed","steps":[{"name":"Generate user","time":{"start":1747065511242,"stop":1747065511244,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Create user at backend","time":{"start":1747065511244,"stop":1747065511368,"duration":124},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true}],"attachments":[{"uid":"27019cf8305fb090","name":"log","source":"27019cf8305fb090.txt","type":"text/plain","size":656},{"uid":"230d1bdafc2ba343","name":"stdout","source":"230d1bdafc2ba343.txt","type":"text/plain","size":830}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":4,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"user_factory::0","time":{"start":1747065511428,"stop":1747065511518,"duration":90},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"specifications::0","time":{"start":1747065511519,"stop":1747065511519,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"test_data::0","time":{"start":1747065511519,"stop":1747065511519,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"driver::0","time":{"start":1747065511531,"stop":1747065511533,"duration":2},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/allure_commons/_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 907, in _teardown_yield_fixture\n    next(it)\n  File \"/home/runner/work/teamcity_test_framework/teamcity_test_framework/tests/conftest.py\", line 82, in driver\n    driver.quit()\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 589, in quit\n    self.execute(Command.QUIT)\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"labels":[{"name":"tag","value":"positive"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"tests.ui_tests"},{"name":"suite","value":"test_create_project"},{"name":"subSuite","value":"TestCreateProject"},{"name":"host","value":"pkrvmberfyhpb9w"},{"name":"thread","value":"4278-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.ui_tests.test_create_project"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"driver","value":"('chrome', '91.0')"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":4,"skipped":0,"passed":1,"unknown":0,"total":5},"items":[{"uid":"ba23eb1819d83ecd","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/84//#testresult/ba23eb1819d83ecd","status":"broken","statusDetails":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found","time":{"start":1747052341402,"stop":1747052341517,"duration":115}},{"uid":"8eaee2d442d4f32","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/83//#testresult/8eaee2d442d4f32","status":"broken","statusDetails":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found","time":{"start":1746798395462,"stop":1746798395602,"duration":140}},{"uid":"5e2d3003c19dfa00","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/82//#testresult/5e2d3003c19dfa00","status":"broken","statusDetails":"selenium.common.exceptions.InvalidSessionIdException: Message: session timed out or not found","time":{"start":1746708910390,"stop":1746708910532,"duration":142}},{"uid":"162a2da9227c215a","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/ui/81//#testresult/162a2da9227c215a","status":"passed","time":{"start":1746560592852,"stop":1746560650874,"duration":58022}}]},"tags":["regression","positive"]},"source":"e9902f40a33831f5.json","parameterValues":["('chrome', '91.0')"]}