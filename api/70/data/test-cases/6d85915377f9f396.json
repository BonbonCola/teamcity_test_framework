{"uid":"6d85915377f9f396","name":"test_user_creates_project_with_empty_id","fullName":"tests.api_tests.test_project_type.TestProject#test_user_creates_project_with_empty_id","historyId":"b7b59b5aed94aef2270c0b11305e018d","time":{"start":1743703747889,"stop":1743703748154,"duration":265},"description":"User cannot create project with empty ID","descriptionHtml":"<p>User cannot create project with empty ID</p>\n","status":"broken","statusMessage":"AttributeError: 'CheckedRequest' object has no attribute 'status_code'","statusTrace":"self = <test_project_type.TestProject object at 0x7f86dffe5bd0>\n\n    @pytest.mark.positive\n    @pytest.mark.crud\n    @allure.feature(\"Project Management\")\n    @allure.story(\"User can create project with empty ID\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_user_creates_project_with_empty_id(self):\n        \"\"\"User cannot create project with empty ID\"\"\"\n        with allure.step(\"Create user\"):\n            user_request = CheckedRequest(self.specifications.superUserSpec(), Endpoint.USERS.url)\n            new_user = user_request.create(self.test_data.user.model_dump())\n        with allure.step(\"Create project by user with empty id\"):\n            project_request = CheckedRequest(self.specifications.authSpec(self.test_data.user), Endpoint.PROJECTS.url)\n            print(f'{self.test_data.project.model_dump(exclude={\"id\"})}')\n            project = project_request.create(self.test_data.project.model_dump(exclude={\"id\"}))\n        with allure.step(\"Check project was created with id == name\"):\n>           assert project.json()['id'].lower() == self.test_data.project.name.replace(\" \", \"\").replace(\"-\", \"\"), f\"Ошибка: {project_request.status_code}\"\nE           AttributeError: 'CheckedRequest' object has no attribute 'status_code'\n\ntests/api_tests/test_project_type.py:130: AttributeError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1743703738115,"stop":1743703738174,"duration":59},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_xunit_setup_method_fixture_TestProject","time":{"start":1743703747637,"stop":1743703747889,"duration":252},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"User cannot create project with empty ID","status":"broken","statusMessage":"AttributeError: 'CheckedRequest' object has no attribute 'status_code'","statusTrace":"self = <test_project_type.TestProject object at 0x7f86dffe5bd0>\n\n    @pytest.mark.positive\n    @pytest.mark.crud\n    @allure.feature(\"Project Management\")\n    @allure.story(\"User can create project with empty ID\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_user_creates_project_with_empty_id(self):\n        \"\"\"User cannot create project with empty ID\"\"\"\n        with allure.step(\"Create user\"):\n            user_request = CheckedRequest(self.specifications.superUserSpec(), Endpoint.USERS.url)\n            new_user = user_request.create(self.test_data.user.model_dump())\n        with allure.step(\"Create project by user with empty id\"):\n            project_request = CheckedRequest(self.specifications.authSpec(self.test_data.user), Endpoint.PROJECTS.url)\n            print(f'{self.test_data.project.model_dump(exclude={\"id\"})}')\n            project = project_request.create(self.test_data.project.model_dump(exclude={\"id\"}))\n        with allure.step(\"Check project was created with id == name\"):\n>           assert project.json()['id'].lower() == self.test_data.project.name.replace(\" \", \"\").replace(\"-\", \"\"), f\"Ошибка: {project_request.status_code}\"\nE           AttributeError: 'CheckedRequest' object has no attribute 'status_code'\n\ntests/api_tests/test_project_type.py:130: AttributeError","steps":[{"name":"Create user","time":{"start":1743703747889,"stop":1743703748005,"duration":116},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Create project by user with empty id","time":{"start":1743703748005,"stop":1743703748152,"duration":147},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Check project was created with id == name","time":{"start":1743703748152,"stop":1743703748153,"duration":1},"status":"broken","statusMessage":"AttributeError: 'CheckedRequest' object has no attribute 'status_code'\n","statusTrace":"  File \"/home/runner/work/teamcity_test_framework/teamcity_test_framework/tests/api_tests/test_project_type.py\", line 130, in test_user_creates_project_with_empty_id\n    assert project.json()['id'].lower() == self.test_data.project.name.replace(\" \", \"\").replace(\"-\", \"\"), f\"Ошибка: {project_request.status_code}\"\n                                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[{"uid":"da5f3fb87c8c3051","name":"stdout","source":"da5f3fb87c8c3051.txt","type":"text/plain","size":2053}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"_xunit_setup_method_fixture_TestProject::0","time":{"start":1743703748232,"stop":1743703748574,"duration":342},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"Project Management"},{"name":"severity","value":"critical"},{"name":"story","value":"User can create project with empty ID"},{"name":"tag","value":"crud"},{"name":"tag","value":"positive"},{"name":"tag","value":"regression"},{"name":"parentSuite","value":"tests.api_tests"},{"name":"suite","value":"test_project_type"},{"name":"subSuite","value":"TestProject"},{"name":"host","value":"fv-az1933-876"},{"name":"thread","value":"4170-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.api_tests.test_project_type"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":21,"unknown":0,"total":23},"items":[{"uid":"bd6d824078403426","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/api/70//#testresult/bd6d824078403426","status":"passed","time":{"start":1743701835371,"stop":1743701835595,"duration":224}},{"uid":"3bb225db6dc58722","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/api/70//#testresult/3bb225db6dc58722","status":"passed","time":{"start":1743699993884,"stop":1743699994134,"duration":250}},{"uid":"b998c93102b63d0","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/api/70//#testresult/b998c93102b63d0","status":"passed","time":{"start":1743699127018,"stop":1743699127298,"duration":280}},{"uid":"9c23bcc23ec429d1","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/api/70//#testresult/9c23bcc23ec429d1","status":"passed","time":{"start":1743697666260,"stop":1743697666485,"duration":225}},{"uid":"f60140a33d63e16d","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/api/70//#testresult/f60140a33d63e16d","status":"passed","time":{"start":1743697041885,"stop":1743697042121,"duration":236}},{"uid":"8ef58cdd8dea9ee3","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/api/69//#testresult/8ef58cdd8dea9ee3","status":"passed","time":{"start":1743696150979,"stop":1743696151184,"duration":205}},{"uid":"e91e605d50bedba0","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/api/68//#testresult/e91e605d50bedba0","status":"passed","time":{"start":1743694608962,"stop":1743694609164,"duration":202}},{"uid":"400733250a46b232","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/api/67//#testresult/400733250a46b232","status":"passed","time":{"start":1743693980701,"stop":1743693980894,"duration":193}},{"uid":"9d09e3b1faa5bf08","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/api/67//#testresult/9d09e3b1faa5bf08","status":"passed","time":{"start":1743693125332,"stop":1743693125554,"duration":222}},{"uid":"7187dc6ef1c27e9e","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/api/66//#testresult/7187dc6ef1c27e9e","status":"passed","time":{"start":1743692646414,"stop":1743692646591,"duration":177}},{"uid":"5079f7497338c071","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/api/65//#testresult/5079f7497338c071","status":"passed","time":{"start":1743691701885,"stop":1743691702124,"duration":239}},{"uid":"92cce4cc764e620","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/api/64//#testresult/92cce4cc764e620","status":"passed","time":{"start":1743690849097,"stop":1743690849253,"duration":156}},{"uid":"277a35bac6ab7eae","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/api/63//#testresult/277a35bac6ab7eae","status":"passed","time":{"start":1743690102199,"stop":1743690102414,"duration":215}},{"uid":"ac1cb33f72dff302","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/api/62//#testresult/ac1cb33f72dff302","status":"passed","time":{"start":1743689129252,"stop":1743689129479,"duration":227}},{"uid":"3f32d0a0a3ad80a2","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/api/61//#testresult/3f32d0a0a3ad80a2","status":"passed","time":{"start":1743685038474,"stop":1743685038741,"duration":267}},{"uid":"f75ff6fc1df3f646","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/api/59//#testresult/f75ff6fc1df3f646","status":"passed","time":{"start":1743530568374,"stop":1743530568602,"duration":228}},{"uid":"e75fd63a036f3c66","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/api/58//#testresult/e75fd63a036f3c66","status":"passed","time":{"start":1743529994435,"stop":1743529994634,"duration":199}},{"uid":"1769a648bde2ed6c","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/api/57//#testresult/1769a648bde2ed6c","status":"passed","time":{"start":1743527331677,"stop":1743527331912,"duration":235}},{"uid":"f9b02245e837a49a","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/api/56//#testresult/f9b02245e837a49a","status":"passed","time":{"start":1743526222954,"stop":1743526223197,"duration":243}},{"uid":"a713acdc0930315b","reportUrl":"https://BonbonCola.github.io/teamcity_test_framework/api/55//#testresult/a713acdc0930315b","status":"passed","time":{"start":1743524069590,"stop":1743524069849,"duration":259}}]},"tags":["crud","regression","positive"]},"source":"6d85915377f9f396.json","parameterValues":[]}